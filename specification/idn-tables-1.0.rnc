#
# LGR XML Schema 1.0 (internal version 0.5a - based on draft-davies-idntables-06)
#

default namespace = "http://www.iana.org/lgr/0.1"

#
# SIMPLE TYPES
#

# RFC 5646 language tag (e.g. "de", "Latn", etc.)
language-tag = xsd:token

## domain to which this LGR applies
domain-name = text

## a single code point
code-point = xsd:token {
    pattern = "[0-9A-F]{4,6}"
}

## a space-separated sequence of code points
code-point-sequence = xsd:token {
    pattern = "[0-9A-F]{4,6}( [0-9A-F]{4,6})+"
}

## single code point, or a sequence of code points
code-point-literal = code-point | code-point-sequence

code-point-set-shorthand = xsd:token {
    pattern = "([0-9A-F]{4,6}|[0-9A-F]{4,6}-[0-9A-F]{4,6})( ([0-9A-F]{4,6}|[0-9A-F]{4,6}-[0-9A-F]{4,6}))*"
}

## dates are used in information fields in the meta section.
date = xsd:token {
    pattern = "\d{4}-\d\d-\d\d"
}

## reference to a rule name (used in "when" and "not-when" attributes, as well
## as the "by-ref" attribute of the "rule" element.)
rule-ref = xsd:IDREF

## a space-separated list of tags. Tags should generally follow identifier
## syntax, although the use of punctuation symbols such as a colon is allowed.
tags = text

## Although "from-tag" attributes are closer to xsd:IDREF lexically and
## semantically, tags do not appear as a single unique instance in the
## document. As such, we are unable to take advantage of facilities provided
## by the validator.
tag-ref = text

## an identifier type (used by "name" attributes).
identifier = xsd:ID

## used in the class "by-ref" attribute to reference another class of the same
## "name" attribute value.
class-ref = xsd:IDREF

## count attribute pattern ("n", "n+" or "n:m")
count-pattern = xsd:token {
    pattern = "\d+(\+|:\d+)?"
}

#
# STRUCTURES
#

## Representation of a single code point, or a sequence of code points
char = element char {
    attribute cp { code-point-literal },
    attribute comment { text }?,
    attribute when { rule-ref }?,
    attribute not-when { rule-ref }?,
    attribute tag { tags }?,
    attribute ref { text }?,
    variant*
}

range-shorthand = xsd:token {
    pattern = "[0-9A-F]{4,6}-[0-9A-F]{4,6}"
}

## Representation of a range of code points
range = element range {
    attribute first-cp { code-point-literal },
    attribute last-cp { code-point-literal },
    attribute comment { text }?,
    attribute tag { tags }?,
    attribute ref { text }?,
    range-shorthand?
}

## Representation of a single code point (no sequences allowed, and no tag attribute allowed).
## This is used when defining the set of characters that constitute a class.
char-simple = element char {
    attribute cp { code-point }
}

## Representation of a range of code points, for use in defining the set of
## characters that constitute a class.
range-simple = element range {
    attribute first-cp { code-point-literal },
    attribute last-cp { code-point-literal },
    range-shorthand?
}


## Representation of a variant code point or sequence
variant = element var {
    attribute cp { code-point-literal },
    attribute type { text }?,
    attribute when { rule-ref }?,
    attribute not-when { rule-ref }?,
    attribute comment { text }?,
    attribute disp { text }?,
    attribute ref { text }?
}


#
# Classes
#


## a "class" element that references the name of another "class"
## (or set-operator like "union") defined elsewhere.
## If used as a matcher (appearing under a "rule" ## element),
## the "count" attribute may be present.
class-invocation = element class {
    (attribute by-ref { class-ref } | attribute from-tag { tag-ref }),
    attribute count { count-pattern }?,
    attribute comment { text }?
}

## defines a new class (set of code points) using Unicode property or
## code point literals
class-declaration = element class {
    # "name" attribute MUST be present if this is a "top-level" class
    # declaration, i.e. appearing directly under the "rules" element.
    # Otherwise, it MUST be absent.
    attribute name { identifier }?,
    # If used as a matcher (appearing in a "rule" element), the "count"
    # attribute may be present. Otherwise, it MUST be absent.
    attribute count { count-pattern }?,
    attribute comment { text }?,
    attribute ref { text }?,
    (
      # define the class by property (e.g. property="sc:Latn"), OR
      attribute property { text }
      # list of single code points and ranges, OR
      | (char-simple | range-simple)+
      # text node to allow for shorthand notation e.g. "0061 0062-0063"
      | code-point-set-shorthand
    )
  }

class-or-set-operator-nested = class-invocation | class-declaration | set-operator

class-or-set-operator-declaration = 
  # a "class" element or set operator (effectively defining a class)
  # directly in the "rules" element.
  class-declaration | set-operator


#
# Set operators
#

complement-operator = element complement {
    attribute name { identifier }?,
    attribute comment { text }?,
    # "count" attribute MUST only be used when this set-operator is
    # used as a matcher (i.e. nested in a <rule> element)
    attribute count { count-pattern }?,
    class-or-set-operator-nested
}

union-operator = element union {
    attribute name { identifier }?,
    attribute comment { text }?,
    # "count" attribute MUST only be used when this set-operator is
    # used as a matcher (i.e. nested in a <rule> element)
    attribute count { count-pattern }?,
    class-or-set-operator-nested,
    # needs two or more child elements
    class-or-set-operator-nested+
}

intersection-operator = element intersection {
    attribute name { identifier }?,
    attribute comment { text }?,
    # "count" attribute MUST only be used when this set-operator is
    # used as a matcher (i.e. nested in a <rule> element)
    attribute count { count-pattern }?,
    class-or-set-operator-nested,
    class-or-set-operator-nested
}

difference-operator = element difference {
    attribute name { identifier }?,
    attribute comment { text }?,
    # "count" attribute MUST only be used when this set-operator is
    # used as a matcher (i.e. nested in a <rule> element)
    attribute count { count-pattern }?,
    class-or-set-operator-nested,
    class-or-set-operator-nested
}

symmetric-difference-operator = element symmetric-difference {
    attribute name { identifier }?,
    attribute comment { text }?,
    # "count" attribute MUST only be used when this set-operator is
    # used as a matcher (i.e. nested in a <rule> element)
    attribute count { count-pattern }?,
    class-or-set-operator-nested,
    class-or-set-operator-nested
}

## operators that transform class(es) into a new class.
set-operator = complement-operator | union-operator | intersection-operator
               | difference-operator | symmetric-difference-operator

#
# Match operators (matchers)
#

any-matcher = element any {
    attribute count { count-pattern }?
}

choice-matcher = element choice {
    attribute count { count-pattern }?,
    # two or more match operators
    match-operator-choice,
    match-operator-choice+
}

char-matcher =
  # for use as a matcher - like "char", except without the "tag" attribute
  element char {
    attribute cp { code-point-literal },
    # If used as a matcher (appearing in a "rule" element), the "count"
    # attribute may be present. Otherwise, it MUST be absent.
    attribute count { count-pattern }?,
    attribute comment { text }?,
    attribute ref { text }?
}

start-matcher = element start { empty }
end-matcher = element end { empty }
anchor-matcher = element anchor { empty }
look-ahead-matcher = element look-ahead {
    attribute comment { text }?,
    match-operators-non-pos
}
look-behind-matcher = element look-behind {
    attribute comment { text }?,
    match-operators-non-pos
}

## non-positional match operator that can be used as a direct child element
## of the choice matcher.
match-operator-choice = (
  any-matcher | choice-matcher | start-matcher | end-matcher | char-matcher
  | class-or-set-operator-nested | rule-matcher
)

## non-positional match operators do not contain any anchor, 
## look-behind or look-ahead elements.
match-operators-non-pos = (
  start-matcher?,
  (any-matcher | choice-matcher | char-matcher
   | class-or-set-operator-nested | rule-matcher)*,
  end-matcher?
)

## positional match operators have an anchor element, which may be preceeded by
## a look-behind element, or followed by a look-ahead element, or both.
match-operators-pos = look-behind-matcher?, anchor-matcher, look-ahead-matcher?

match-operators = match-operators-non-pos | match-operators-pos


#
# Rules
#

# top-level rule must have "name" attribute
rule-declaration-top = element rule {
    attribute name { identifier },
    attribute comment { text }?,
    attribute ref { text }?,
    match-operators
}

## rule element used as a matcher (either by-ref or contains other match operators itself)
rule-matcher =
  element rule {
    attribute count { count-pattern }?,
    attribute comment { text }?,
    (attribute by-ref { rule-ref } | match-operators)
  }


#
# Actions
#

action-declaration = element action {
    attribute comment { text }?,
    attribute disp { text },
    ( attribute match { text } | attribute not-match { text } )?,
    ( attribute any-variant { text } | attribute all-variants { text } | attribute only-variants { text } )?
}

# DOCUMENT STRUCTURE

start = lgr
lgr = element lgr {
    attribute id { text }?,
    meta-section?,
    data-section,
    rules-section?
}


## Meta section - information recorded with an label
## generation ruleset that generally does not affect machine processing
## (except for unicode-version).
## However, if any "class-declaration" uses the "property" attribute,
## one or more unicode-version MUST be present.
meta-section = element meta {
    element version {
        attribute comment { text }?,
      text
    }
    & element date { date }?
    & element language { language-tag }*
    & element domain { domain-name }*
    & element validity-start { text }?
    & element validity-end { text }?
    & element unicode-version { text }*
    & element description {
        attribute type { text }?,
        text
    }*
    & element references {
        element reference {
            attribute id { text },
            attribute comment { text }?,
            text
        }*
    }?
}

data-section = element data { (char | range)+ }

## Note that action declarations are strictly order dependent.
## class-or-set-operator-declaration and rule-declaration-top
## are weakly order dependent, they must precede first use of the
## identifier via by-ref.
rules-section = element rules {
    (class-or-set-operator-declaration | rule-declaration-top | action-declaration)*
}
