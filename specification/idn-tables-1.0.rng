<?xml version="1.0" encoding="UTF-8"?>
<grammar ns="http://www.iana.org/lgr/0.1" xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0" xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
  <!-- SIMPLE TYPES -->
  <define name="language-tag">
    <data type="token"/>
  </define>
  <!-- RFC 5646 language tag (e.g. "de", "Latn", etc.) -->
  <define name="domain-name">
    <text/>
  </define>
  <!-- Domain name -->
  <define name="code-point">
    <data type="token">
      <!-- A single code point -->
      <param name="pattern">[0-9A-F]{4,6}</param>
    </data>
  </define>
  <define name="code-point-sequence">
    <data type="token">
      <!-- A sequence of code points -->
      <param name="pattern">[0-9A-F]{4,6}( [0-9A-F]{4,6})+</param>
    </data>
  </define>
  <define name="code-point-literal">
    <choice>
      <ref name="code-point"/>
      <ref name="code-point-sequence"/>
    </choice>
  </define>
  <define name="variant-condition">
    <text/>
  </define>
  <!-- A condition for applying the variant (TBD) -->
  <define name="tag">
    <text/>
  </define>
  <!-- Freeform text tag -->
  <define name="date">
    <data type="token">
      <!-- ISO 8601 date -->
      <param name="pattern">\d{4}-\d\d-\d\d</param>
    </data>
  </define>
  <define name="rule-ref">
    <data type="IDREF"/>
  </define>
  <define name="tag">
    <text/>
  </define>
  <define name="identifier">
    <data type="ID"/>
  </define>
  <define name="class-ref">
    <text/>
  </define>
  <define name="count-pattern">
    <data type="token">
      <param name="pattern">\d+(\+|:\d+)?</param>
    </data>
  </define>
  <!-- STRUCTURES -->
  <define name="char">
    <a:documentation>Representation of a single code point, or a sequence of code points</a:documentation>
    <element name="char">
      <attribute name="cp">
        <ref name="code-point-literal"/>
      </attribute>
      <optional>
        <attribute name="comment"/>
      </optional>
      <optional>
        <attribute name="when">
          <ref name="rule-ref"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="not-when">
          <ref name="rule-ref"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="tag">
          <ref name="tag"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="ref"/>
      </optional>
      <zeroOrMore>
        <ref name="variant"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="char-single">
    <a:documentation>Representation of a single code point (no sequences allowed, and no tag attribute allowed)</a:documentation>
    <element name="char">
      <attribute name="cp">
        <ref name="code-point"/>
      </attribute>
      <optional>
        <attribute name="comment"/>
      </optional>
      <optional>
        <attribute name="ref"/>
      </optional>
      <zeroOrMore>
        <ref name="variant"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="range">
    <a:documentation>Representation of a range of code points</a:documentation>
    <element name="range">
      <attribute name="first-cp">
        <ref name="code-point-literal"/>
      </attribute>
      <attribute name="last-cp">
        <ref name="code-point-literal"/>
      </attribute>
      <optional>
        <attribute name="comment"/>
      </optional>
      <optional>
        <attribute name="tag">
          <ref name="tag"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="ref"/>
      </optional>
      <text/>
    </element>
  </define>
  <define name="variant">
    <a:documentation>Representation of a variant code point or sequence</a:documentation>
    <element name="var">
      <attribute name="cp">
        <ref name="code-point-literal"/>
      </attribute>
      <optional>
        <attribute name="type"/>
      </optional>
      <optional>
        <attribute name="when">
          <ref name="rule-ref"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="not-when">
          <ref name="rule-ref"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="comment"/>
      </optional>
      <optional>
        <attribute name="disp"/>
      </optional>
      <optional>
        <attribute name="ref"/>
      </optional>
    </element>
  </define>
  <!--
    
    Classes
    
  -->
  <define name="class-invocation">
    <a:documentation>a "class" element that references the name of another "class"
(or set-operator like "union") defined elsewhere.
This could also be used as a matcher (appearing under a "rule"
element), ## in which case the "count" attribute may be present.</a:documentation>
    <element name="class">
      <attribute name="byref">
        <ref name="class-ref"/>
      </attribute>
      <optional>
        <attribute name="count">
          <ref name="count-pattern"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="comment"/>
      </optional>
    </element>
  </define>
  <define name="class-declaration">
    <a:documentation>defines a new class (set of code points) using Unicode property or
code point literals</a:documentation>
    <element name="class">
      <optional>
        <!--
          "name" attribute should be present if this is a "top-level" class
          declaration, i.e. appearing directly under the "rules" element.
          Otherwise, it should be absent.
        -->
        <attribute name="name">
          <ref name="identifier"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="comment"/>
      </optional>
      <choice>
        <!-- define the class by property, OR -->
        <attribute name="property"/>
        <oneOrMore>
          <!-- list of single code points and ranges, OR -->
          <choice>
            <ref name="char-single"/>
            <ref name="range"/>
          </choice>
        </oneOrMore>
        <!-- free form text node to allow for shorthand notation e.g. "0061 0062-0063" -->
        <text/>
      </choice>
    </element>
  </define>
  <define name="class-or-set-operator-nested">
    <choice>
      <ref name="class-invocation"/>
      <ref name="class-declaration"/>
      <ref name="set-operator"/>
    </choice>
  </define>
  <define name="class-or-set-operator-declaration">
    <choice>
      <ref name="class-declaration"/>
      <ref name="set-operator"/>
    </choice>
  </define>
  <define name="complement-operator">
    <element name="complement">
      <optional>
        <attribute name="name">
          <ref name="identifier"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="comment"/>
      </optional>
      <optional>
        <!--
          "count" attribute should only be used when this set-operator is
          used as a matcher (i.e. directly within a <rule> element)
        -->
        <attribute name="count">
          <ref name="count-pattern"/>
        </attribute>
      </optional>
      <ref name="class-or-set-operator-nested"/>
    </element>
  </define>
  <define name="union-operator">
    <element name="union">
      <optional>
        <attribute name="name">
          <ref name="identifier"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="comment"/>
      </optional>
      <optional>
        <!--
          "count" attribute should only be used when this set-operator is
          used as a matcher (i.e. directly within a <rule> element)
        -->
        <attribute name="count">
          <ref name="count-pattern"/>
        </attribute>
      </optional>
      <ref name="class-or-set-operator-nested"/>
      <oneOrMore>
        <!-- needs two or more child elements -->
        <ref name="class-or-set-operator-nested"/>
      </oneOrMore>
    </element>
  </define>
  <define name="intersection-operator">
    <element name="intersection">
      <optional>
        <attribute name="name">
          <ref name="identifier"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="comment"/>
      </optional>
      <optional>
        <!--
          "count" attribute should only be used when this set-operator is
          used as a matcher (i.e. directly within a <rule> element)
        -->
        <attribute name="count">
          <ref name="count-pattern"/>
        </attribute>
      </optional>
      <ref name="class-or-set-operator-nested"/>
      <ref name="class-or-set-operator-nested"/>
    </element>
  </define>
  <define name="difference-operator">
    <element name="difference">
      <optional>
        <attribute name="name">
          <ref name="identifier"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="comment"/>
      </optional>
      <optional>
        <!--
          "count" attribute should only be used when this set-operator is
          used as a matcher (i.e. directly within a <rule> element)
        -->
        <attribute name="count">
          <ref name="count-pattern"/>
        </attribute>
      </optional>
      <ref name="class-or-set-operator-nested"/>
      <ref name="class-or-set-operator-nested"/>
    </element>
  </define>
  <define name="symmetric-difference-operator">
    <element name="symmetric-difference">
      <optional>
        <attribute name="name">
          <ref name="identifier"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="comment"/>
      </optional>
      <optional>
        <!--
          "count" attribute should only be used when this set-operator is
          used as a matcher (i.e. directly within a <rule> element)
        -->
        <attribute name="count">
          <ref name="count-pattern"/>
        </attribute>
      </optional>
      <ref name="class-or-set-operator-nested"/>
      <ref name="class-or-set-operator-nested"/>
    </element>
  </define>
  <define name="set-operator">
    <a:documentation>operators that transform class(es) into a new class.</a:documentation>
    <choice>
      <ref name="complement-operator"/>
      <ref name="union-operator"/>
      <ref name="intersection-operator"/>
      <ref name="difference-operator"/>
      <ref name="symmetric-difference-operator"/>
    </choice>
  </define>
  <!--
    
    Match operators (matchers)
    
  -->
  <define name="any-matcher">
    <element name="any">
      <optional>
        <attribute name="count">
          <ref name="count-pattern"/>
        </attribute>
      </optional>
    </element>
  </define>
  <define name="choice-matcher">
    <element name="choice">
      <optional>
        <attribute name="count">
          <ref name="count-pattern"/>
        </attribute>
      </optional>
      <!-- two or more match operators -->
      <ref name="match-operator"/>
      <oneOrMore>
        <ref name="match-operator"/>
      </oneOrMore>
    </element>
  </define>
  <define name="char-matcher">
    <element name="char">
      <attribute name="cp">
        <ref name="code-point-literal"/>
      </attribute>
      <optional>
        <attribute name="comment"/>
      </optional>
      <optional>
        <attribute name="ref"/>
      </optional>
    </element>
  </define>
  <define name="start-matcher">
    <element name="start">
      <empty/>
    </element>
  </define>
  <define name="end-matcher">
    <element name="end">
      <empty/>
    </element>
  </define>
  <define name="anchor-matcher">
    <element name="anchor">
      <empty/>
    </element>
  </define>
  <define name="look-ahead-matcher">
    <element name="look-ahead">
      <empty/>
    </element>
  </define>
  <define name="look-behind-matcher">
    <element name="look-behind">
      <empty/>
    </element>
  </define>
  <define name="match-operator">
    <choice>
      <ref name="any-matcher"/>
      <ref name="choice-matcher"/>
      <ref name="start-matcher"/>
      <ref name="end-matcher"/>
      <ref name="char-matcher"/>
      <ref name="class-or-set-operator-nested"/>
      <ref name="rule-matcher"/>
      <ref name="anchor-matcher"/>
      <ref name="look-ahead-matcher"/>
      <ref name="look-behind-matcher"/>
    </choice>
  </define>
  <!--
    
    Rules
    
  -->
  <!-- top-level rule must have "name" attribute -->
  <define name="rule-declaration-top">
    <element name="rule">
      <attribute name="name">
        <ref name="identifier"/>
      </attribute>
      <optional>
        <attribute name="comment"/>
      </optional>
      <oneOrMore>
        <ref name="match-operator"/>
      </oneOrMore>
    </element>
  </define>
  <define name="rule-matcher">
    <a:documentation>rule element used as a matcher (either byref or contains other match operators itself)</a:documentation>
    <element name="rule">
      <optional>
        <attribute name="count">
          <ref name="count-pattern"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="comment"/>
      </optional>
      <choice>
        <attribute name="byref">
          <ref name="rule-ref"/>
        </attribute>
        <oneOrMore>
          <ref name="match-operator"/>
        </oneOrMore>
      </choice>
    </element>
  </define>
  <!--
    
    Actions
    
  -->
  <define name="action-declaration">
    <element name="action">
      <optional>
        <attribute name="comment"/>
      </optional>
      <attribute name="disp"/>
      <optional>
        <choice>
          <attribute name="match"/>
          <attribute name="not-match"/>
        </choice>
      </optional>
      <optional>
        <choice>
          <attribute name="any-variant"/>
          <attribute name="all-variants"/>
          <attribute name="only-variants"/>
        </choice>
      </optional>
    </element>
  </define>
  <!-- DOCUMENT STRUCTURE -->
  <start>
    <ref name="lgr"/>
  </start>
  <define name="lgr">
    <element name="lgr">
      <optional>
        <attribute name="id"/>
      </optional>
      <optional>
        <ref name="meta-section"/>
      </optional>
      <ref name="data-section"/>
      <optional>
        <ref name="rules-section"/>
      </optional>
    </element>
  </define>
  <define name="meta-section">
    <a:documentation>Meta section - information recorded with an label
generation ruleset that generally does not affect machine processing
(except for unicode-version).</a:documentation>
    <element name="meta">
      <zeroOrMore>
        <choice>
          <element name="version">
            <optional>
              <attribute name="comment"/>
            </optional>
            <text/>
          </element>
          <optional>
            <element name="date">
              <ref name="date"/>
            </element>
          </optional>
          <zeroOrMore>
            <element name="language">
              <ref name="language-tag"/>
            </element>
          </zeroOrMore>
          <zeroOrMore>
            <element name="domain">
              <ref name="domain-name"/>
            </element>
          </zeroOrMore>
          <optional>
            <element name="validity-start">
              <text/>
            </element>
          </optional>
          <optional>
            <element name="validity-end">
              <text/>
            </element>
          </optional>
          <zeroOrMore>
            <element name="unicode-version">
              <text/>
            </element>
          </zeroOrMore>
          <zeroOrMore>
            <element name="description">
              <optional>
                <attribute name="type"/>
              </optional>
              <text/>
            </element>
          </zeroOrMore>
          <optional>
            <element name="references">
              <zeroOrMore>
                <element name="reference">
                  <attribute name="id"/>
                  <optional>
                    <attribute name="comment"/>
                  </optional>
                  <text/>
                </element>
              </zeroOrMore>
            </element>
          </optional>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <!-- Data section - the actual code point data of the table. -->
  <define name="data-section">
    <element name="data">
      <oneOrMore>
        <choice>
          <ref name="char"/>
          <ref name="range"/>
        </choice>
      </oneOrMore>
    </element>
  </define>
  <!-- Rules section -->
  <define name="rules-section">
    <element name="rules">
      <zeroOrMore>
        <choice>
          <ref name="class-or-set-operator-declaration"/>
          <ref name="rule-declaration-top"/>
          <ref name="action-declaration"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
</grammar>
